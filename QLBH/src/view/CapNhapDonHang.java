package view;



import java.util.ArrayList;
import java.util.Date;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import model.SanPham;
import model.UserSession;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import DAO.CTSanPhamDAO;
import DAO.HoaDonDAO;
import DAO.NhanVienDAO;
import DAO.SanPhamDAO;
import model.CTSanPham;
import model.HoaDon;
import model.LuuSanPham;
import model.NhanVien;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.border.BevelBorder;


public class CapNhapDonHang extends javax.swing.JFrame {

    /**
     * Creates new form CapNhapDonHang
     */
	SanPham s1;
	
	DefaultTableModel SpTable1;
	DefaultTableModel HDTable1;
	DefaultTableModel CTSPTable1;
	
    public CapNhapDonHang() {
    	
        initComponents();
        NgayDat();
       
        this.setLocationRelativeTo(null);
        SpTable1=new DefaultTableModel() {
        	@Override
        	public boolean isCellEditable(int row, int column) {
        		// TODO Auto-generated method stub
        		return false;
        	};
        };
        HDTable1=new DefaultTableModel() {
        	@Override
        	public boolean isCellEditable(int row, int column) {
        		// TODO Auto-generated method stub
        		return false;
        	};
        };
        CTSPTable1=new DefaultTableModel() {
        	@Override
        	public boolean isCellEditable(int row, int column) {
        		// TODO Auto-generated method stub
        		return false;
        	};
        };
        SpTable.setModel(SpTable1);
        SpTable1.addColumn("MaSP");
        SpTable1.addColumn("TenSP");
        SpTable1.addColumn("Loai");
        SpTable1.addColumn("Size");
        SpTable1.addColumn("Gia");
      
        
        
      
        ArrayList<SanPham>list= SanPhamDAO.getInstance().selectAll();
        for (SanPham sp:list) {
        	SpTable1.addRow(new Object[] {sp.getMaSP(),sp.getTenSp(),sp.getLoai(),sp.getSize(),sp.getGia()});
        }
        HDTable.setModel(HDTable1);
        HDTable1.addColumn("MaHD");
        HDTable1.addColumn("KhachHang");
        HDTable1.addColumn("NgayDat");
        HDTable1.addColumn("TenNhanVien");
        HDTable1.addColumn("ThanhTien");
        
        ArrayList<HoaDon>list1= HoaDonDAO.getInstance().selectAll();
        for (HoaDon hd:list1)
        { HDTable1.addRow(new Object[] {hd.getMaHD(),hd.getKhachHang(),hd.getNgayDat(),hd.getTenNhanVien(),hd.getThanhTien()});
        }
        
        CTSPTable.setModel(CTSPTable1);
        CTSPTable1.addColumn("TenSP");
        CTSPTable1.addColumn("Loai");
        CTSPTable1.addColumn("Soluong");
        CTSPTable1.addColumn("Size");
        CTSPTable1.addColumn("TongTien");
       
        
        
      
        ArrayList<CTSanPham>listCT= CTSanPhamDAO.getInstance().selectAll();
        for (CTSanPham sp:listCT) {
        	CTSPTable1.addRow(new Object[] {sp.getTenSp(),sp.getLoai(),sp.getSoLuong(),sp.getSize(),sp.getTongGia()});
        }
        Refresh();
       
       
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtHD = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SanPham = new javax.swing.JScrollPane();
        SanPham.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent e) {
//		     		
//
//                     
//                    
             
        	}
        });
        SpTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        CtspTable = 	new javax.swing.JScrollPane();
        CTSPTable = new javax.swing.JTable();
        CTSPTable.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
        jLabel12 = new javax.swing.JLabel();
        HoaDon = new javax.swing.JScrollPane();
        HDTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton2.addActionListener(new ActionListener() {
        	private Component CapNhapDonHang;

			public void actionPerformed(ActionEvent e) {
        		int selecIndex=SpTable.getSelectedRow();
        		String maHd=txtHD.getText();
        		
        		if(selecIndex==-1) {
        			JOptionPane.showMessageDialog(CapNhapDonHang.this,"Vui Lòng Chọn Sản Phẩm Bạn Muốn Thêm");
        			
        		}
        		else if (maHd.equals("")) {
        			JOptionPane.showMessageDialog(CapNhapDonHang.this,"Bạn Phải Tạo Hóa Đơn đã ");
        		}
        		else if (selecIndex!=-1&&!maHd.equals("")) {
        			String SoLuong = JOptionPane.showInputDialog(this.CapNhapDonHang,"Mời bạn Nhập Số Lượng :");
        			
        
        			try {
        			    int soluong = Integer.parseInt(SoLuong);
        			    SanPham sp1=new SanPham();
            			int selectionIndex = SpTable.getSelectedRow();
                      
                          String MaSp = (String) SpTable.getValueAt(selectionIndex, 0);
                          SanPham sp = SanPhamDAO.getInstance().selectById(MaSp);
                         
                          int gia=sp.getGia();
                          
                          
                          int tonggia=gia*soluong;
                          System.out.println(tonggia);
                          CTSanPham ctsp=new CTSanPham();
                          ctsp.setMaSp(MaSp);
                          ctsp.setSoLuong(soluong);
                          ctsp.setTongGia(tonggia);
                          CTSanPhamDAO.getInstance().insert(ctsp);
                          Refresh();
                          TinhTongTien();
        			    
        			} catch (NumberFormatException e1) {
        			    if (SoLuong == null || SoLuong.trim().isEmpty()) {
        			        // xử lý khi chuỗi rỗng
        			        JOptionPane.showMessageDialog(this.CapNhapDonHang, "Bạn chưa nhập số lượng.");
        			    } else {
        			        // xử lý khi chuỗi không phải là số
        			        JOptionPane.showMessageDialog(this.CapNhapDonHang, "Số lượng phải là số nguyên	.");
        			    }
        			}

        			
        			
                      
                      
                      
                     
                   
                      
                      
                 
             	
        				
        			}
        		
        		
        	}
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setText("QUẢN LÝ ĐƠN HÀNG");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Mã Hóa Đơn");

        txtHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKHActionPerformed(evt);
            }
        });

        jLabel4.setText("Tên Khách Hàng");

        jLabel5.setText("Ngày Đặt:");
        jButton1 = new javax.swing.JButton();
        jButton1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		CTSPTable1.setRowCount(0);
        		CTSanPhamDAO.getInstance().deleteAll();
        		String maHoaDon = "HD"  + (int)(Math.random()*1000);
        		txtHD.setText(maHoaDon);
        		txtKhachHang.setText("  ");
        		txtTienD.setText(" ");
        		txtTTien.setText("  ");
        		txtKt.setText("  ");
        		
        		
       		 
      		
        	}
        });
        
                jButton1.setText("Tạo Hóa Đơn");
        
        JLabel lblThnhTin = new JLabel();
        lblThnhTin.setText("Thành Tiền");
        
        txtTTien = new JTextField();
        
        JLabel lblTinKhchTr = new JLabel();
        lblTinKhchTr.setText("Tiền khách trả");
        
        JLabel lblTinD = new JLabel();
        lblTinD.setText("Tiền Dư");
        
        txtKhachHang = new JTextField();
        
        txtND1 = new JTextField();
        
        txtKt = new JTextField();
        
        txtTienD = new JTextField();
        
        JButton btnThanhTon = new JButton();
        btnThanhTon.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		HoaDon s1=new HoaDon();
        		
        		String mahd=txtHD.getText();
        		
        		String tenKh=txtKhachHang.getText();
        		String tenNV=UserSession.getTen();
        		String ngayDat=txtND1.getText();
        		String txtTongTien = txtTTien.getText().replace("VND", "").trim();
        		String txtTienTra=txtKt.getText();
        		
        		if ( mahd == null || mahd.isEmpty() || tenKh == null || tenKh.isEmpty() || txtTongTien == null || txtTongTien.isEmpty() || txtTienTra == null || txtTienTra.isEmpty()) {
        		    JOptionPane.showMessageDialog(CapNhapDonHang.this, "Bạn điền thiếu thông tin");
        		}


        		else {
        			int TongTien= Integer.parseInt(txtTongTien);
            		s1.setMaHD(mahd);
            		s1.setNgayDat(ngayDat);
            		s1.setThanhTien(TongTien);
            		s1.setKhachHang(tenKh);
            		s1.setTenNhanVien(tenNV);
            	HoaDonDAO.getInstance().insert(s1);
            	
            	boolean res=TinhTienDu();// kiem tra xem khach nhap tien co nhieu hon tong gia hay khong 
            	if(res)
            	{
            		HDTable1.setRowCount(0);
                	ArrayList<HoaDon>list1= HoaDonDAO.getInstance().selectAll();
                	 
                
                    for (HoaDon hd:list1)
                    { HDTable1.addRow(new Object[] {hd.getMaHD(),hd.getKhachHang(),hd.getNgayDat(),hd.getTenNhanVien(),hd.getThanhTien()});
                    }
            	}
        		}

        	
        	
        		
        		
        		
        	}
        });
        btnThanhTon.setText("Thanh Toán");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addGap(73)
        							.addComponent(txtHD, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE))
        						.addComponent(jLabel2)
        						.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        							.addGroup(jPanel1Layout.createSequentialGroup()
        								.addComponent(lblThnhTin, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(txtTTien))
        							.addGroup(jPanel1Layout.createSequentialGroup()
        								.addComponent(lblTinKhchTr, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(txtKt, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE))))
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addPreferredGap(ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addGap(10)
        									.addComponent(lblTinD, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE))
        								.addComponent(jLabel4)))
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addGap(18)
        							.addComponent(jLabel5)
        							.addPreferredGap(ComponentPlacement.RELATED)))
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(btnThanhTon, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE))
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addGap(35)
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(txtND1, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtKhachHang, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtTienD, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE))))
        					.addGap(37))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(27)
        					.addComponent(jButton1)
        					.addPreferredGap(ComponentPlacement.RELATED)))
        			.addGap(28))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(35)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(txtHD, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel4)
        				.addComponent(txtKhachHang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(27)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblThnhTin)
        				.addComponent(txtTTien, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtND1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel5))
        			.addGap(33)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblTinKhchTr)
        				.addComponent(txtKt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblTinD)
        				.addComponent(txtTienD, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(52)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton1)
        				.addComponent(btnThanhTon))
        			.addGap(55))
        );
        jPanel1.setLayout(jPanel1Layout);

        SpTable.setModel(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null, null, null},
        	},
        	new String[] {
        		"MaSanPham", "TenSP ", "Loai", "Size", "Gia"
        	}
        ));
        SpTable.getColumnModel().getColumn(1).setPreferredWidth(153);
        SanPham.setViewportView(SpTable);

        jLabel11.setText("Chi Tiết Hóa Đơn");

        CTSPTable.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"TenSP ", "Loai", "SoLuong", "Size", "TongTien"
        	}
        ));
        CtspTable.setViewportView(CTSPTable);

        jLabel12.setText("Tìm kiếm sản phẩm");

        HDTable.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"MaHD","KhachHang", "NgayDat", "NhanVien",  "ThanhTien"
        	}
        ));
        HoaDon.setViewportView(HDTable);

        jLabel16.setText("Bảng hóa đơn");

        jButton2.setText("Thêm Sản Phẩm");
        
        JButton deleteSP = new JButton();
        deleteSP.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		int deleteIndex=CTSPTable.getSelectedRow();
        		if(deleteIndex==-1) {
        			JOptionPane.showMessageDialog(CapNhapDonHang.this,"Vui lòng chọn sản phẩm ","Lỗi",JOptionPane.ERROR_MESSAGE);
        			
        		}
        		else {
        			int confirm = JOptionPane.showConfirmDialog(CapNhapDonHang.this, "Bạn có chắc chắc muốn xóa không ?");
        			if(confirm==JOptionPane.YES_OPTION) {
        				String MaSp=(String)CTSPTable.getValueAt(deleteIndex, 0);
        				CTSanPhamDAO.getInstance().delete(MaSp);
        				
        			}
        		}
        		Refresh();
        	}
        	
        });
        deleteSP.setText("Xóa Sản Phẩm");
        
        btnHome = new JButton();
        btnHome.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		dispose();
        		Home home=new Home();
        		home.setVisible(true);
        	}
        });
        btnHome.setText("Home");
        
        textFind = new JTextField();
        
        JButton btnTmKim = new JButton();
        btnTmKim.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String sanpham=textFind.getText();
        		if(sanpham!=null) {
        			ArrayList<model.SanPham> list=SanPhamDAO.getInstance().findByName(sanpham);
        			SpTable1.setRowCount(0);
        			 for (SanPham sp:list) {
        		        	SpTable1.addRow(new Object[] {sp.getMaSP(),sp.getTenSp(),sp.getLoai(),sp.getSize(),sp.getGia()});
        		        }
        		       
        			
        		}
        		else {
        			JOptionPane.showMessageDialog(CapNhapDonHang.this,"Vui lòng nhâp sản phầm bạn muốn tìm ");
        			
        		}
        		
        	}
        });
        btnTmKim.setText("Tìm Kiếm");
        
        JLabel jLabel12_1 = new JLabel();
        jLabel12_1.setText("Bảng Sản Phẩm");
        
        JButton btnTiLiBng = new JButton();
        btnTiLiBng.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        			SpTable1.setRowCount(0);
        		   ArrayList<SanPham>list= SanPhamDAO.getInstance().selectAll();
        	        for (SanPham sp:list) {
        	        	SpTable1.addRow(new Object[] {sp.getMaSP(),sp.getTenSp(),sp.getLoai(),sp.getSize(),sp.getGia()});
        	        }
        	}
        });
        btnTiLiBng.setText("Tải lại bảng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(btnHome)
        					.addGap(234)
        					.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(5)
        							.addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 104, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(textFind, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(btnTmKim, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE))
        						.addComponent(jLabel12)
        						.addComponent(jLabel12_1, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
        						.addComponent(CtspTable, GroupLayout.PREFERRED_SIZE, 421, GroupLayout.PREFERRED_SIZE)
        						.addComponent(SanPham, GroupLayout.PREFERRED_SIZE, 438, GroupLayout.PREFERRED_SIZE)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jButton2)
        							.addGap(35)
        							.addComponent(deleteSP, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE)
        							.addGap(29)
        							.addComponent(btnTiLiBng, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE)))
        					.addPreferredGap(ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(jLabel16, GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE)
        						.addComponent(HoaDon, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jPanel1, 0, 0, Short.MAX_VALUE))))
        			.addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(18)
        					.addComponent(jLabel1))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(btnHome, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 282, GroupLayout.PREFERRED_SIZE)
        					.addGap(34)
        					.addComponent(jLabel16))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(8)
        					.addComponent(jLabel12)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(textFind, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnTmKim))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jLabel12_1)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(SanPham, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jButton2)
        						.addComponent(deleteSP)
        						.addComponent(btnTiLiBng))))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(HoaDon, GroupLayout.PREFERRED_SIZE, 290, GroupLayout.PREFERRED_SIZE)
        				.addGroup(layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(jLabel11)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(CtspTable, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)))
        			.addGap(157))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void txtKHActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapNhapDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapNhapDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapNhapDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapNhapDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CapNhapDonHang().setVisible(true);
            }
        });
    }
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane SanPham;
    private javax.swing.JScrollPane CtspTable;
    private javax.swing.JScrollPane HoaDon;
    private javax.swing.JTable SpTable;
    private javax.swing.JTable CTSPTable;
    private javax.swing.JTable HDTable;
    private javax.swing.JTextField txtHD;
    private JButton btnHome;
    private JTextField txtTTien;
    private JTextField textFind;
    private JTextField txtKhachHang;
    private JTextField txtND1;
    private JTextField txtKt;
    private JTextField txtTienD;
    private void NgayDat() {
    	Date date = new Date();
    	// Định dạng ngày tháng
    	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    	String ngayDat = sdf.format(date);
    	txtND1.setText(ngayDat);
    }
    private void Refresh() {
    	CTSPTable1.setRowCount(0);
		 ArrayList<CTSanPham>listCT= CTSanPhamDAO.getInstance().selectAll();
	        for (CTSanPham sp:listCT) {
	        	CTSPTable1.addRow(new Object[] {sp.getTenSp(),sp.getLoai(),sp.getSoLuong(),sp.getSize(),sp.getTongGia()});
	        }
    }
    private void TinhTongTien() {
    	
    	int tong=0;
    
    	for (int i=0;i<CTSPTable.getRowCount();i++)
    	{	String input=CTSPTable.getValueAt(i, 4).toString();
    		if (!input.isEmpty()) {
    			tong+=Integer.parseInt(input);
    	}
    		
    	}
    	
    
       

       
        txtTTien.setText( tong + " VND");
    }
    private boolean TinhTienDu() {
    	int TienTra=0;
    	int TienDu=0;
    	int TongTien=0;
    	
    	String txtTienTra=txtKt.getText();
    
    	String txtTongTien = txtTTien.getText().replace("VND", " ").trim();
    	
    	
		
    	if(!txtTienTra.isEmpty()) {
    		TienTra=Integer.parseInt(txtKt.getText().trim());
    	}
    	if(!txtTongTien.isEmpty()) {
    		TongTien=Integer.parseInt(txtTongTien.trim());
    	}
    	
    	if(TienTra<TongTien) {
    		JOptionPane.showMessageDialog(CapNhapDonHang.this,"Tiền khách trả ít hơn tổng tiền ");
    		return false;
    	}
    	else {
    		TienDu=TienTra-TongTien;
        	txtTienD.setText(TienDu+" VND");
        	return true;
    	}
    	
    	
    	
    	
    	
    }
}
